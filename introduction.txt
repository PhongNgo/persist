
Persist is a tool that checks the Persistent property of concurrent programs under Total-Store-Order (TSO) memory models 
such as in Intel x86 and prevents non-intended behaviours by inserting a minimal set of fences.

Persistence is a weaker definition than data race, and defined by program order and total store order. Keeping a program 
Persist under TSO guarantees sequential consistent properties of the program. Another way to avoid non-intended 
behaviours of programs is keeping it Robust [1]. Robustness is based on program order, store order, and read-from relations 
that is considered in many previous approaches [2,3,4]. The stronger one of Robustness and Persistence is Triangular race free 
(TRF) [5].

One of important differences between Persistence and Robustness that we can verify persistent properties of programs 
with abstraction making our tool is more scalable, especially with algorithms of multiple processes that are common 
in concurrent systems.

[1] D. Shasha and M. Snir. Efficient and correct execution of parallel programs that share memory. 
ACM Trans. Program. Lang. Syst., 10(2):282–312, Apr. 1988.

[2] A. Bouajjani, E. Derevenetc, and R. Meyer. Checking and enforcing robustness against tso. 
In ESOP, pages 533–553, 2013.

[3]  S. Burckhardt and M. Musuvathi. Effective program verification for relaxed memory models. 
In CAV, volume 5123 of LNCS, pages 107–120. Springer, 2008.

[4] J. Alglave, D. Kroening, V. Nimal, and D. Poetzl. 
Don’t sit on the fence: A static analysis approach to automatic fence insertion. 
In CAV, volume 8559 of LNCS. Springer, 2014.

[5] S. Owens. Reasoning about the implementation of concurrency abstractions on x86-tso. 
In ECOOP, volume 6183 of LNCS, pages 478-503, Springer 2010.

##########################
#This is the end of file.#
##########################
