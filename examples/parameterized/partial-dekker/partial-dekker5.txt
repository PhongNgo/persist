#
# Partial Dekker's mutex algorithm:
# http://en.wikipedia.org/wiki/Dekker's_algorithm
# Each process will check whether there is a thread in the left or in the rith in critial section.
# If not it enters critical section
# IS NOT robust.
#
# q0:   flag[i] = true;
# q1:   while (flag[i+1] == true || flag[i-1] == true) {
# q2:      if (turn ≠ i) {
# q3:         flag[i] = false;
# q4:         while (turn ≠ i) {
# q5:         }
# q6:         flag[i] = true;
# q7:      }
# q8:   }
#  
#    // critical section
#    ...
# q9:   turn    =turn + 1;
# q10:   flag[i] = false;
#    // remainder section
#
# Memory layout:
# 0 — turn
# 1 — flag[1]
# 2 - flag[2]
# 3 - flag[3]
# 4 — flag[4]
# 5 - flag[5]

thread t1
initial q0
transition 	q0	q1	write	1	1

transition 	q1	q2	read	flag_i-1	5
transition 	q2	q3	read	flag_i+1	2

transition 	q3	q4	check	|| == flag_i+1 1 == flag_i-1 1
transition	q3	q10	check	&& != flag_i+1 1 != flag_i-1 1

transition	q4	q5	read	turn	0
transition	q5	q1	check 	== turn	0	
transition	q5	q6	check 	!= turn	0
transition	q6	q7	write	0	1
transition	q7	q8	read 	turn	0
transition	q8	q9	check	== turn	0
transition	q8	q7	check	!= turn 0

transition	q9	q1	write	1	1
	
transition	q10	q11	write	1	0
transition	q11	q12	write	0	1

transition 	q12	q0 	noop

end

thread t2
initial q0
transition 	q0	q1	write	1	2

transition 	q1	q2	read	flag_i-1	1
transition 	q2	q3	read	flag_i+1	3

transition 	q3	q4	check	|| == flag_i+1 1 == flag_i-1 1
transition	q3	q10	check	&& != flag_i+1 1 != flag_i-1 1

transition	q4	q5	read	turn	0
transition	q5	q1	check 	== turn	1	
transition	q5	q6	check 	!= turn	1
transition	q6	q7	write	0	2
transition	q7	q8	read 	turn	0
transition	q8	q9	check	== turn	1
transition	q8	q7	check	!= turn 1

transition	q9	q1	write	1	2
	
transition	q10	q11	write	2	0
transition	q11	q12	write	0	2

transition 	q12	q0 	noop

end

thread t3
initial q0
transition 	q0	q1	write	1	3

transition 	q1	q2	read	flag_i-1	2
transition 	q2	q3	read	flag_i+1	4

transition 	q3	q4	check	|| == flag_i+1 1 == flag_i-1 1
transition	q3	q10	check	&& != flag_i+1 1 != flag_i-1 1

transition	q4	q5	read	turn	0
transition	q5	q1	check 	== turn	2	
transition	q5	q6	check 	!= turn	2
transition	q6	q7	write	0	3
transition	q7	q8	read 	turn	0
transition	q8	q9	check	== turn	2
transition	q8	q7	check	!= turn 2

transition	q9	q1	write	1	3
	
transition	q10	q11	write	3	0
transition	q11	q12	write	0	3

transition 	q12	q0 	noop

end

thread t4
initial q0
transition 	q0	q1	write	1	4

transition 	q1	q2	read	flag_i-1	3
transition 	q2	q3	read	flag_i+1	5

transition 	q3	q4	check	|| == flag_i+1 1 == flag_i-1 1
transition	q3	q10	check	&& != flag_i+1 1 != flag_i-1 1

transition	q4	q5	read	turn	0
transition	q5	q1	check 	== turn	3	
transition	q5	q6	check 	!= turn	3
transition	q6	q7	write	0	4
transition	q7	q8	read 	turn	0
transition	q8	q9	check	== turn	3
transition	q8	q7	check	!= turn 3

transition	q9	q1	write	1	4
	
transition	q10	q11	write	4	0
transition	q11	q12	write	0	4

transition 	q12	q0 	noop

end


thread t5
initial q0
transition 	q0	q1	write	1	5

transition 	q1	q2	read	flag_i-1	4
transition 	q2	q3	read	flag_i+1	1

transition 	q3	q4	check	|| == flag_i+1 1 == flag_i-1 1
transition	q3	q10	check	&& != flag_i+1 1 != flag_i-1 1

transition	q4	q5	read	turn	0
transition	q5	q1	check 	== turn	4	
transition	q5	q6	check 	!= turn	4
transition	q6	q7	write	0	5
transition	q7	q8	read 	turn	0
transition	q8	q9	check	== turn	4
transition	q8	q7	check	!= turn 4

transition	q9	q1	write	1	5
	
transition	q10	q11	write	0	0
transition	q11	q12	write	0	5

transition 	q12	q0 	noop

end


