/* Problematic code from PostgreSQL

(Code from [Alglave, Kroening, ESOP2013])

#define WORKERS 2
volatile _Bool latch[WORKERS];
volatile _Bool flag[WORKERS];
void worker(int i){
  while(!latch[i]);
  for(;;){
    assert(!latch[i] || flag[i]);
    latch[i] = 0;
    if(flag[i]){
      flag[i] = 0;
      flag[(i+1)%WORKERS] = 1;
      latch[(i+1)%WORKERS] = 1;
    }
    while(!latch[i]);
  }
}
*/

forbidden
  BAD * * * * * * *;
  * BAD * * * * * *;
  * * BAD * * * * *;
  * * * BAD * * * *;
  * * * * * BAD * *;
  * * * * * * BAD *;
  * * * ** * * * BAD

process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[0] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop


process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[1] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop


process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[2] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop

process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[3] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop


process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[4] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop

process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[5] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop

process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[6] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop

process(1)
data
  latch = 1 : [0:1]
  flag = 1 : [0:1]
registers
  $l = 0 : [0:1]
  $f = 0 : [0:1]
text
  read: latch[my] = 1;
L0:
  read: $l := latch[my];
  read: $f := flag[my];
  if $l = 1 && $f = 0 then goto BAD;
  write: latch[my] := 0;
  either{
    read: flag[my] = 1;
    write: flag[my] := 0;
    write: flag[0] := 1;
    either {
       read: latch[0] = 0;
       write: latch[0] := 1
    or
 	read: latch[0] = 1
    }
    
  or
    read: flag[my] = 0
  };
  read: latch[my] = 1;
  goto L0;
  BAD: nop
