# 0: latch
# 1: work_to_do
# 2: flag: to force waiter starting before waker

# Waiter:
# for (;;)
#   ResetLatch();  //latch = 0
#   if (work_to_do)
#	//Do work
#   WaitLatch();  // while (latch != 1) {}
#
# Waker:
# for (;;)
#	work_to_do = 1;
#       SetLatch(); // if latch == 1 return; else latch == 1

# Result: 1 fence for Persit, 2 fence for Trencher => good example. 1 fence at the same as fixed by developer.
# Musketeer: 3 fences. It insert fences for all write operation

thread waiter

initial q0

transition q0	q1	write	0	0
transition q1	q2	read	toDo	1
transition q2	q3	check == toDo 	1
transition q3 	q4	noop
transition q2	q4	check != toDo 	1
transition q4	q5 	write 	1	2
transition q5 	q6	mfence
	
transition q6 	q7 	read 	latch 	0
transition q7	q6	check == latch 	0
transition q7	q8 	check != latch 	0
transition q8	q9	write	0	0
transition q9	q10	read	toDo	1
transition q10	q11	check == toDo 	1
transition q11	q12	write 	0	1
transition q10	q12 	check != toDo 	1
transition q12	q6	noop

end


thread waker

initial q0
transition q0	q1	read	flag 	2
transition q1 	q0 	check == flag 	0
transition q1	q2	check != flag  	0
transition q2	q3	write	1	1
transition q3 	q4	read	latch	0
transition q4	q5	check != latch 	1
transition q5 	q6 	write 	1	0
transition q4	q6	check == latch 	1
transition q6	q2	noop
	
end
