# 0: latch
# 1: work_to_do
# 2: flag: to force waiter starting before waker

# Waiter:
# for (;;)
#   ResetLatch();  //latch = 0
#   if (work_to_do)
#	work_to_do = 0
#	//Do work
#   WaitLatch();  // while (latch != 1) {}
#
# Waker:
# for (;;)
#	work_to_do = 1;
#       SetLatch(); // if latch == 1 return; else latch == 1

# Result: 3 fence for Persit, 3 fence for Trencher 
# Musketeer: 3 fences. 

thread waiter

initial q0

transition q0	q1	write	0	0

transition q1	q2	read	toDo	1
transition q2	q3	check == toDo 	1
transition q3	q4_1	write	0	1
transition q2	q4_1 	check != toDo 	1

transition q4_1 q4_2 	write	1	2
transition q4_2 q4	mfence
	
transition q4 	q5 	read 	latch 	0
transition q5	q4	check == latch 	0
transition q5	q6 	check != latch 	0

transition q6	q7	write	0	0

transition q7	q8	read	toDo	1
transition q8	q9	check == toDo 	1
transition q9	q4	write	0	1
transition q2	q4 	check != toDo 	1

end


thread waker

initial q01
transition q01	q02 	read	flag 	2
transition q02	q0	check == flag 1
transition q02 q01	check != flag 0

transition q0	q1	write	1	1

transition q1 	q2	read	latch	0
transition q2	q3	check != latch 	1
transition q3 	q4 	write 	1	0
transition q2	q4	check == latch 	1

transition q4	q0 	noop
	
end
