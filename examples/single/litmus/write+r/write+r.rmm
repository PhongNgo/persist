/*
# x - 0
# y - 1
# T1: repreat { x=1; y=1;}
# T2: repeat { x=1; y=2; Rx <- x}
# error state: Rx=1; y=2, x=1
#
# Cycles for happended-before relations:
# isu&update(x=1,t2), isu(y=2), Rx=x, isu&update(x=1,t1), isu&update(y=1), update(y=2)
 */

forbidden
  L1 L2 * * *;
  L1 * L2 * *;
  L1 * * L2 *;
  L1 * * * L2

data
  x = 0 : [0:2]
  y = 0 : [0:2]

process(1)
registers
  $rx = * : [0:2]
  $ry = * : [0:2]
	
text
  L0: write: x := 1; 
  write: y := 1;
  read: $rx := x;
  read: $ry := y;
  if $rx = 1 && $ry = 2 then {
	L1: nop
  };

  goto L0

process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
text
  L0: write: x := 1;
  write: y := 2;
L1:  read: $rx := x;
  if $rx != 1 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 1 && $rx1 = 1 && $ry = 2 then {
	L2: nop
  };

   goto L0

process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
text
  L0: write: x := 1;
  write: y := 2;
L1:  read: $rx := x;
  if $rx != 1 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 1 && $rx1 = 1 && $ry = 2 then {
	L2: nop
  };

   goto L0


process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
text
  L0: write: x := 1;
  write: y := 2;
L1:  read: $rx := x;
  if $rx != 1 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 1 && $rx1 = 1 && $ry = 2 then {
	L2: nop
  };

   goto L0

process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
text
  L0: write: x := 1;
  write: y := 2;
L1:  read: $rx := x;
  if $rx != 1 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 1 && $rx1 = 1 && $ry = 2 then {
	L2: nop
  };

   goto L0

