/*
# x - 0
# y - 1
# z - 2
# T1: repeat {x=0; z=1; x=0; y=1;}
# T2: repeat {y=2; Rx <-x = 0;}
# Error state: Rx=0; y=2; x=0; z=1
# 
# Cycles for happended-before relations:
# isu&update(x=0), isu&update(z=1), isu(y=2), Rx=x, isu&update(x=0), isu&update(y=1), update(y=2)
 */

forbidden
  L1 * L2 * * ;
  L1 * * L2 * ;
  L1 * * * L2 ;
  * L1 L2 * * ;
  * L1 * L2 * ;
  * L1 * * L2 

data
  x = 0 : [0:2]
  y = 0 : [0:2]
  z = 0 : [0:2]

process(1)
registers
  $rx = * : [0:2]
  $ry = * : [0:2]
  $rz = * : [0:2]
	
text
  L0: write: x := 0; 
  write: z := 1;
  write: x := 0;
  write: y := 1;
  read: $rx := x;
  read: $ry := y;
  read: $rz := z;
  if $rx = 0 && $ry = 2 && $rz = 1 then {
	L1: nop
  };

  goto L0

process(1)
registers
  $rx = * : [0:2]
  $ry = * : [0:2]
  $rz = * : [0:2]
	
text
  L0: write: x := 0; 
  write: z := 1;
  write: x := 0;
  write: y := 1;
  read: $rx := x;
  read: $ry := y;
  read: $rz := z;
  if $rx = 0 && $ry = 2 && $rz = 1 then {
	L1: nop
  };

  goto L0


process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
  $rz = * : [0:2]
text
  L0: write: y := 2;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  read: $rz := z;
  if $rx = 0 && $rx1 = 0 && $ry = 2 && $rz = 1 then {
	L2: nop
  };

   goto L0


process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
  $rz = * : [0:2]
text
  L0: write: y := 2;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  read: $rz := z;
  if $rx = 0 && $rx1 = 0 && $ry = 2 && $rz = 1 then {
	L2: nop
  };

   goto L0


process(1)
registers
  $rx = * : [0:2]
  $rx1 = * : [0:2]
  $ry = * : [0:2]
  $rz = * : [0:2]
text
  L0: write: y := 2;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  read: $rz := z;
  if $rx = 0 && $rx1 = 0 && $ry = 2 && $rz = 1 then {
	L2: nop
  };

   goto L0

