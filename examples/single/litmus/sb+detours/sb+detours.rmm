/*
# x - 0
# y - 0
# T1: repeat { x=0; Ry <-y =2}
# T2: repeat {x=0;y=2;}
# T3: repeat {y=3; Rx <- x = 0}
# error state: x=0; y=3, Rx=0, Ry=3
#
# Cycles for happended-before relation:
 */

forbidden
  L2 * L2 L2 * * ;
  L2 * L2 * L2 *;
  L2 * L2 * * L2;
  * L2 L2 L2 * *;
  * L2 L2 * L2 *;
  * L2 L2 * * L2

data
  x = 0 : [0:3]
  y = 0 : [0:3]

process(1)
registers
  $rx = * : [0:3]
  $ry = * : [0:3]
  $ry1 = * : [0:3]
	
text
  L0: write: x := 0; 
  L1:  read: $ry := y;
  if $ry != 2 then {
      goto L1
  };
  read: $rx := x;
  read: $ry1 := y;
  if $rx = 0 && $ry = 2 && $ry1 = 3 then {
	L2: nop
  };

  goto L0

process(1)
registers
  $rx = * : [0:3]
  $ry = * : [0:3]
  $ry1 = * : [0:3]
	
text
  L0: write: x := 0; 
  L1:  read: $ry := y;
  if $ry != 2 then {
      goto L1
  };
  read: $rx := x;
  read: $ry1 := y;
  if $rx = 0 && $ry = 2 && $ry1 = 3 then {
	L2: nop
  };

  goto L0


process(1)
registers
  $rx = * : [0:3]
  $ry = * : [0:3]
text
  L0: write: x := 0;
  write: y := 2;
  read: $rx := x;
  read: $ry := y;
  if $rx = 0 && $ry = 3 then {
	L2: nop
  };

   goto L0


process(1)
registers
  $rx = * : [0:3]
  $rx1 = * : [0:3]
  $ry = * : [0:3]
text
  L0: write: y := 3;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 0 && $rx1 = 0 && $ry = 3 then {
	L2: nop
  };

   goto L0

process(1)
registers
  $rx = * : [0:3]
  $rx1 = * : [0:3]
  $ry = * : [0:3]
text
  L0: write: y := 3;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 0 && $rx1 = 0 && $ry = 3 then {
	L2: nop
  };

   goto L0


process(1)
registers
  $rx = * : [0:3]
  $rx1 = * : [0:3]
  $ry = * : [0:3]
text
  L0: write: y := 3;
  L1:  read: $rx := x;
  if $rx != 0 then {
      goto L1
  };
  read: $rx1 := x;
  read: $ry := y;
  if $rx = 0 && $rx1 = 0 && $ry = 3 then {
	L2: nop
  };

   goto L0


