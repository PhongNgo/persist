#
# Simpler version of Dekker mutex algorithm with 4 processes:
# http://en.wikipedia.org/wiki/Dekker's_algorithm
#
# For process 0:
# 0: while (true) {
# 1:   flag[0] = true;
# 2:   if (flag[1] == true || flag[2] == true || flag[3] == true ) {     
# 3:         flag[0] = false;
# 4:         goto 1;
# 5:   } 
# 6:   // critical section
# 7:   flag[0] = false;
# 8:  }
#
# Memory layout:
# 0 — flag[0]
# 1 — flag[1]
# 2 - flag[2]
# 3 - flag[3]

thread t0
initial q0
transition q0	q1	write	1	0
transition q1	q2	read	flag1	1
transition q2	q3	read	flag2	2
transition q3	q4	read	flag3	3
transition q4	q5	check	|| || == flag1 1 == flag2 1 == flag3 1 
transition q4	q6	check	&& && == flag1 0 == flag2 0 == flag3 0 
transition q5 	q0	write	0	0
transition q6	q7	noop
transition q7	q0	write	0	0
end

thread t1
initial q0
transition q0	q1	write	1	1
transition q1	q2	read	flag0	0
transition q2	q3	read	flag2	2
transition q3	q4	read	flag3	3
transition q4	q5	check	|| || == flag0 1 == flag2 1 == flag3 1 
transition q4	q6	check	&& && == flag0 0 == flag2 0 == flag3 0 
transition q5 	q0	write	0	1
transition q6	q7	noop
transition q7	q0	write	0	1
end

thread t2
initial q0
transition q0	q1	write	1	2
transition q1	q2	read	flag0	0
transition q2	q3	read	flag1	1
transition q3	q4	read	flag3	3
transition q4	q5	check	|| || == flag0 1 == flag1 1 == flag3 1 
transition q4	q6	check	&& && == flag0 0 == flag1 0 == flag3 0 
transition q5 	q0	write	0	2
transition q6	q7	noop
transition q7	q0	write	0	2
end

thread t3
initial q0
transition q0	q1	write	1	3
transition q1	q2	read	flag0	0
transition q2	q3	read	flag2	2
transition q3	q4	read	flag1	1
transition q4	q5	check	|| || == flag0 1 == flag2 1 == flag1 1 
transition q4	q6	check	&& && == flag0 0 == flag2 0 == flag1 0 
transition q5 	q0	write	0	3
transition q6	q7	noop
transition q7	q0	write	0	3
end
