/* 
#
# Simpler version of Dekker mutex algorithm with 4 processes:
#
# For process 0:
# 0: while (true) {
# 1:   flag[0] = true;
# 2:   if (flag[1] == true || flag[2] == true || flag[3] == true ) {     
# 3:         flag[0] = false;
# 4:         goto 1;
# 5:   } 
# 6:   // critical section
# 7:   flag[0] = false;
# 8:  }
 */

forbidden
  CS CS * *; CS * CS *; CS * * CS; 
  * CS CS *; * CS * CS; * * CS CS

process(1)
data
  flag = 0 : [0:1]
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r2 = * : [0:1]

text
  L0: write: flag[my] := 1;
  read: $r0 := flag[0];
  read: $r1 := flag[1];
  read: $r2 := flag[2];
  if $r0 = 1 || $r1 = 1 || $r2 = 1  then {
      write: flag[my] := 0;
      goto L0
  };
  CS: nop; 
  write: flag[my] := 0;
  goto L0

process(1)
data
  flag = 0 : [0:1]
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r2 = * : [0:1]

text
  L0: write: flag[my] := 1;
  read: $r0 := flag[0];
  read: $r1 := flag[1];
  read: $r2 := flag[2];
  if $r0 = 1 || $r1 = 1 || $r2 = 1  then {
      write: flag[my] := 0;
      goto L0
  };
  CS: nop; 
  write: flag[my] := 0;
  goto L0

process(1)
data
  flag = 0 : [0:1]
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r2 = * : [0:1]

text
  L0: write: flag[my] := 1;
  read: $r0 := flag[0];
  read: $r1 := flag[1];
  read: $r2 := flag[2];
  if $r0 = 1 || $r1 = 1 || $r2 = 1  then {
      write: flag[my] := 0;
      goto L0
  };
  CS: nop; 
  write: flag[my] := 0;
  goto L0

process(1)
data
  flag = 0 : [0:1]
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r2 = * : [0:1]

text
  L0: write: flag[my] := 1;
  read: $r0 := flag[0];
  read: $r1 := flag[1];
  read: $r2 := flag[2];
  if $r0 = 1 || $r1 = 1 || $r2 = 1  then {
      write: flag[my] := 0;
      goto L0
  };
  CS: nop; 
  write: flag[my] := 0;
  goto L0
