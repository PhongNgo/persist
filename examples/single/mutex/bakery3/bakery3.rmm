/* Lamport's bakery algorithm for two processes */
/*
 INITIALIZATION:

	typedef char boolean;
	...
	shared boolean choosing[n]
	shared int num[n];
	...
	for (j=0; j < n; j++) {
		num[j] = 0;
	}
	...

ENTRY PROTOCOL (for Process i):

	
	choosing[i] = TRUE;
	num[i] = max(num[0], ..., num[n-1]) + 1;
	choosing[i] = FALSE;
	
	
	for (j=0; j < n; j++) {
	
		
		while (choosing[j]) {}
		
		
		if ((num[j] > 0) &&
		  ((num[j] < num[i]) ||
		  (num[j] == num[i]) && (j < i))) {
			while (num[j] > 0) {}
		}
	}
		

EXIT PROTOCOL (for Process i):

	num[i] = 0;

*/

forbidden
  CS CS *;
  CS * CS;
  * CS CS

process
data
  c = 0 : [0:1]
  n = 0 : [0:1000]
registers
  $r0 = * : [0:1000]
  $r1 = * : [0:1000]
  $max = * : [0:1000]
text
  L0: write: c[my] := 1;
  read: $r0 := n[0];
  read: $r1 := n[1];
  if $r0 > $r1 then {
	$max := $r0 + 1
  } else {
	$max := $r1 + 1
  };
  write: n[my] := $max;
  write: c[my] := 0;

  read: c[0] = 0; /* spin wait */
  L1: read: $r0 := n[0];
  if $r0 != 0 && $r0 <= $max then
    goto L1;

  read: c[1] = 0; /* spin wait */
  L2: read: $r1 := n[1];

  if $r1 != 0 && $r1 <= $max then
    goto L2;

  CS: write: n[my] := 0;
  goto L0

process
data
  c = 0 : [0:1]
  n = 0 : [0:1000]
registers
  $r0 = * : [0:1000]
  $r1 = * : [0:1000]
  $max = * : [0:1000]
text
  L0: write: c[my] := 1;
  read: $r0 := n[0];
  read: $r1 := n[1];
  if $r0 > $r1 then {
	$max := $r0 + 1
  } else {
	$max := $r1 + 1
  };
  write: n[my] := $max;
  write: c[my] := 0;

  read: c[0] = 0; /* spin wait */
  L1: read: $r0 := n[0];
  if $r0 != 0 && $r0 < $max then
    goto L1;

  read: c[1] = 0; /* spin wait */
  L2: read: $r1 := n[1];

  if $r1 != 0 &&  $r1 <= $max then
    goto L2;

  CS: write: n[my] := 0;
  goto L0


process
data
  c = 0 : [0:1]
  n = 0 : [0:1000]
registers
  $r0 = * : [0:1000]
  $r1 = * : [0:1000]
  $max = * : [0:1000]
text
  L0: write: c[my] := 1;
  read: $r0 := n[0];
  read: $r1 := n[1];
  if $r0 > $r1 then {
	$max := $r0 + 1
  } else {
	$max := $r1 + 1
  };
  write: n[my] := $max;
  write: c[my] := 0;

  read: c[0] = 0; /* spin wait */
  L1: read: $r0 := n[0];
  if $r0 != 0 && $r0 < $max then
    goto L1;

  read: c[1] = 0; /* spin wait */
  L2: read: $r1 := n[1];

  if $r1 != 0 &&  $r1 < $max then
    goto L2;

  CS: write: n[my] := 0;
  goto L0


