/* Double-checked singleton implementation:

Singleton *instance(){
 while (1) {
   if(_instance == 0){
     lock(mutex)
     if(_instance == 0){
        _instance = new Singleton();
     }
     unlock(mutex)
   }
     _instance;
 }
}
 */

forbidden
  END * * * * *;
  * END * * * *;
  * * END * * *;
  * * * END * *;
  * * * * END *;
  * * * * * END

data
  inst = 0 : [0:1] /* points to [inst], 0-null, 1-singleton */
  s0 = 0 : [0:1] /* the singleton: 0-uninitialized, 1-initialized */
  lck = 0 : [0:1]

macro lock(lck)
  cas(lck,0,1)
endmacro

macro unlock(lck)
  write: lck := 0
endmacro

/* Get a singleton.
 * The register rtgt will be set to point to the singleton.
 */
macro instance(rtgt)
L0:
  read: rtgt := inst;
  if rtgt = 0 then{
    lock(lck);
    read: rtgt := inst;
    if rtgt = 0 then{
      either{
        read: s0 = 1; /* Error: double initialization! */
        goto END
      or
        write: s0 := 1; /* Initialize s0 */
        write: inst := 1 /* set inst to point to s0 */
      }
    };
    unlock(lck)
  };
  read: rtgt := inst
endmacro

macro p()
process
registers
  $inst = * : [0:1]
  $val = * : [0:1]
text
  instance($inst);
   /* The following read may be reordered with the read of inst,
   * on VIPS and Alpha, but not on e.g. POWER. */
  read: $val := [$inst];
  assume: $inst = 0 || $val = 0;
  END: nop
endmacro

p()
p()
p()
p()
p()
p()
