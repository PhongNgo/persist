/* Dijkstra's lock */

/* wsn.cse.wustl.edu/images/f/ff/Mutex.pptâ€Ž */

forbidden
   CS CS * *; CS * CS *; CS * * CS; 
  * CS CS *; * CS * CS; * * CS CS

data
  turn = * : [0:4]

process
data
  flag = 0 : [0:2]
registers
  $flag = * : [0:2]
  $turn = * : [0:4]
  $flag0 = * : [0:2]
  $flag1 = * : [0:2]
  $flag2 = * : [0:2]
  
text
  START:
  write: flag[my] := 1;
  read: $turn := turn;
  while $turn != 0 do{
   if $turn = 1 then
	read: $flag := flag[0]
   else {
     	if $turn = 2 then 
		read: $flag := flag[1]
	else 
		read: $flag := flag[2]
   };
   
   if $flag = 0 then
      write: turn := 0;
   read: $turn := turn
  };
  write: flag[my] := 2;
  read: $flag0 := flag[0];
  read: $flag1 := flag[1];
  read: $flag2 := flag[2];
  if $flag0 = 2 || $flag1 = 2 || $flag2 = 2 then
    goto START;
  CS: nop;
  write: flag[my] := 0;
  goto START


process
data
  flag = 0 : [0:2]
registers
  $flag = * : [0:2]
  $turn = * : [0:4]
  $flag0 = * : [0:2]
  $flag1 = * : [0:2]
  $flag2 = * : [0:2]
  
text
  START:
  write: flag[my] := 1;
  read: $turn := turn;
  while $turn != 1 do{
   if $turn = 0 then
	read: $flag := flag[0]
   else {
     	if $turn = 2 then 
		read: $flag := flag[1]
	else 
		read: $flag := flag[2]
   };

   if $flag = 0 then
      write: turn := 1;
   read: $turn := turn
  };
  write: flag[my] := 2;
  read: $flag0 := flag[0];
  read: $flag1 := flag[1];
  read: $flag2 := flag[2];
  if $flag0 = 2 || $flag1 = 2 || $flag2 = 2 then
    goto START;
  CS: nop;
  write: flag[my] := 0;
  goto START


process
data
  flag = 0 : [0:2]
registers
  $flag = * : [0:2]
  $turn = * : [0:4]
  $flag0 = * : [0:2]
  $flag1 = * : [0:2]
  $flag2 = * : [0:2]
  
text
  START:
  write: flag[my] := 1;
  read: $turn := turn;
  while $turn != 2 do{
   if $turn = 0 then
	read: $flag := flag[0]
   else {
     	if $turn = 1 then 
		read: $flag := flag[1]
	else 
		read: $flag := flag[2]
   };
    
   if $flag = 0 then
      write: turn := 2;
   read: $turn := turn
  };
  write: flag[my] := 2;
  read: $flag0 := flag[0];
  read: $flag1 := flag[1];
  read: $flag2 := flag[2];
  if $flag0 = 2 || $flag1 = 2 || $flag2 = 2 then
    goto START;
  CS: nop;
  write: flag[my] := 0;
  goto START


process
data
  flag = 0 : [0:2]
registers
  $flag = * : [0:2]
  $turn = * : [0:4]
  $flag0 = * : [0:2]
  $flag1 = * : [0:2]
  $flag2 = * : [0:2]
  
text
  START:
  write: flag[my] := 1;
  read: $turn := turn;
  while $turn != 3 do{
    if $turn = 0 then
	read: $flag := flag[0]
   else {
     	if $turn = 1 then 
		read: $flag := flag[1]
	else 
		read: $flag := flag[2]
   };
   if $flag = 0 then
      write: turn := 3;
   read: $turn := turn
  };
  write: flag[my] := 2;
  read: $flag0 := flag[0];
  read: $flag1 := flag[1];
  read: $flag2 := flag[2];
  if $flag0 = 2 || $flag1 = 2 || $flag2 = 2 then
    goto START;
  CS: nop;
  write: flag[my] := 0;
  goto START
